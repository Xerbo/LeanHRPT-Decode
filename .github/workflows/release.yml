name: Release

on:
  push:
    tags:
      - 'v*'

env:
  BUILD_TYPE: Release
  TEMP_PATH: /tmp/build
  WIN_TEMP_PATH: /tmp/winbuild

jobs:
  prepare_release:
    runs-on: ubuntu-latest
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}

    steps:
    - name: Create Release
      uses: actions/create-release@v1
      id: create_release
      with:
        tag_name: ${{ github.ref }}
        release_name: Release ${{ github.ref }}
        body: A release wow
        draft: false
        prerelease: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  build_linux:
    runs-on: ubuntu-latest
    needs: [prepare_release]

    steps:
    - name: Checkout code
      uses: actions/checkout@v2
      with:
        fetch-depth: 0

    - name: Install apt dependencies
      run: 'sudo apt-get update && sudo apt-get install -y cmake make git g++ python3 python3-pip mesa-common-dev libglu1-mesa-dev'

    - name: Install pip dependencies
      run: 'pip3 install -U pip && pip3 install aqtinstall'

    - name: Download AppImageKit
      run: 'wget https://github.com/AppImage/AppImageKit/releases/download/13/appimagetool-x86_64.AppImage && chmod +x appimagetool-x86_64.AppImage'

    - name: Create build path
      run: 'mkdir $TEMP_PATH'

    - name: Install Qt
      run: 'aqt install-qt linux desktop 5.15.2 &&
            cp -r 5.15.2/gcc_64/* $TEMP_PATH'

    - name: Install libpredict
      run: 'git clone https://github.com/la1k/libpredict &&
            cd libpredict &&
            mkdir build &&
            cd build &&
            cmake -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX=$TEMP_PATH .. &&
            make -j4 &&
            make install'

    - name: Install muparser
      run: 'git clone https://github.com/beltoforion/muparser &&
            cd muparser &&
            mkdir build &&
            cd build &&
            cmake -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX=$TEMP_PATH -DENABLE_OPENMP=OFF -DENABLE_SAMPLES=OFF .. &&
            make -j4 &&
            make install'

    - name: Compile LeanHRPT
      run: 'mkdir build &&
            cd build &&
            cmake -DCMAKE_BUILD_TYPE=$BUILD_TYPE -DCMAKE_INSTALL_PREFIX=/usr -DCMAKE_PREFIX_PATH=/tmp/build .. &&
            make -j4'

    - name: Package
      run: 'mkdir LeanHRPT-Decode.AppDir &&
            mkdir LeanHRPT-Decode.AppDir/usr &&
            mkdir LeanHRPT-Decode.AppDir/usr/bin &&
            mkdir LeanHRPT-Decode.AppDir/usr/lib &&
            mkdir LeanHRPT-Decode.AppDir/usr/plugins &&
            mkdir LeanHRPT-Decode.AppDir/usr/plugins/imageformats &&
            mkdir LeanHRPT-Decode.AppDir/usr/share &&
            mkdir LeanHRPT-Decode.AppDir/usr/share/icons &&
            mkdir LeanHRPT-Decode.AppDir/usr/share/leanhrpt &&
            cp AppRun                            LeanHRPT-Decode.AppDir/ &&
            cp build/LeanHRPT-Decode.desktop     LeanHRPT-Decode.AppDir/ &&
            cp logo128.png                       LeanHRPT-Decode.AppDir/usr/share/icons/LeanHRPT-Decode.png &&
            cp presets.ini                       LeanHRPT-Decode.AppDir/usr/share/leanhrpt/ &&
            cp gradients.ini                     LeanHRPT-Decode.AppDir/usr/share/leanhrpt/ &&
            cp calibration.ini                   LeanHRPT-Decode.AppDir/usr/share/leanhrpt/ &&
            cp projection.ini                    LeanHRPT-Decode.AppDir/usr/share/leanhrpt/ &&
            cp -r $TEMP_PATH/plugins/platforms/                        LeanHRPT-Decode.AppDir/usr/plugins/ &&
            cp $TEMP_PATH/plugins/imageformats/libq{jpeg,webp,tiff}.so LeanHRPT-Decode.AppDir/usr/plugins/imageformats/ &&
            cp $TEMP_PATH/lib/libQt5Gui.so.5     LeanHRPT-Decode.AppDir/usr/lib/ &&
            cp $TEMP_PATH/lib/libQt5Network.so.5 LeanHRPT-Decode.AppDir/usr/lib/ &&
            cp $TEMP_PATH/lib/libQt5Widgets.so.5 LeanHRPT-Decode.AppDir/usr/lib/ &&
            cp $TEMP_PATH/lib/libQt5Core.so.5    LeanHRPT-Decode.AppDir/usr/lib/ &&
            cp $TEMP_PATH/lib/libQt5XcbQpa.so.5  LeanHRPT-Decode.AppDir/usr/lib/ &&
            cp $TEMP_PATH/lib/libQt5DBus.so.5    LeanHRPT-Decode.AppDir/usr/lib/ &&
            cp $TEMP_PATH/lib/libicuuc.so.56     LeanHRPT-Decode.AppDir/usr/lib/ &&
            cp $TEMP_PATH/lib/libicui18n.so.56   LeanHRPT-Decode.AppDir/usr/lib/ &&
            cp $TEMP_PATH/lib/libicudata.so.56   LeanHRPT-Decode.AppDir/usr/lib/ &&
            cp $TEMP_PATH/lib/libpredict.so.3    LeanHRPT-Decode.AppDir/usr/lib/ &&
            cp $TEMP_PATH/lib/libmuparser.so.2   LeanHRPT-Decode.AppDir/usr/lib/ &&
            cp build/LeanHRPT-Decode             LeanHRPT-Decode.AppDir/usr/bin/ &&
            find LeanHRPT-Decode.AppDir/ -name "*.so*" -exec strip {} \; &&
            strip LeanHRPT-Decode.AppDir/usr/bin/LeanHRPT-Decode &&
            ./appimagetool-x86_64.AppImage LeanHRPT-Decode.AppDir'

    - name: Upload AppImage
      uses: actions/upload-release-asset@v1
      with:
        upload_url: ${{ needs.prepare_release.outputs.upload_url }}
        asset_path: ./LeanHRPT_Decode-x86_64.AppImage
        asset_name: LeanHRPT_Decode-x86_64.AppImage
        asset_content_type: application/x-executable
      env:
        GITHUB_TOKEN: ${{ github.token }}

  build_debian:
    strategy:
      matrix:
        distro: [debian_bullseye, ubuntu_hirsute, ubuntu_impish]
    runs-on: ubuntu-latest
    needs: [prepare_release]

    steps:
    - name: Checkout code
      uses: actions/checkout@v2
      with:
        fetch-depth: 0

    - name: Build and run docker image
      run: 'cd docker/ &&
            docker build -f $DISTRO/Dockerfile . --tag build &&
            docker run -v $GITHUB_WORKSPACE:/root/LeanHRPT-Decode build /root/build.sh'
      env:
        DISTRO: ${{ matrix.distro }}

    - name: Upload Package
      uses: actions/upload-release-asset@v1
      with:
        upload_url: ${{ needs.prepare_release.outputs.upload_url }}
        asset_path: build/LeanHRPT-Decode_amd64.deb
        asset_name: ${{ matrix.distro }}_amd64.deb
        asset_content_type: application/vnd.debian.binary-package
      env:
        GITHUB_TOKEN: ${{ github.token }}

  build_windows:
    runs-on: ubuntu-latest
    needs: [prepare_release]

    steps:
    - name: Checkout code
      uses: actions/checkout@v2
      with:
        fetch-depth: 0

    - name: Install apt dependencies
      run: 'sudo apt-get update && sudo apt-get install -y cmake make git python3 python3-pip mingw-w64 zip'

    - name: Install pip dependencies
      run: 'pip3 install -U pip && pip3 install aqtinstall'

    - name: Create build path
      run: 'mkdir $TEMP_PATH && mkdir $WIN_TEMP_PATH'

    - name: Install Qt
      run: 'aqt install-qt linux desktop 5.15.2 &&
            aqt install-qt windows desktop 5.15.2 win64_mingw81 &&
            cp -r 5.15.2/gcc_64/* $TEMP_PATH &&
            cp -r 5.15.2/mingw81_64/* $WIN_TEMP_PATH'

    - name: Install OpenSSL
      run: 'wget https://repo.msys2.org/mingw/mingw64/mingw-w64-x86_64-openssl-1.1.1.g-1-any.pkg.tar.xz &&
            tar -xf mingw-w64-x86_64-openssl-1.1.1.g-1-any.pkg.tar.xz'

    - name: Patch Qt
      run: 'rm $WIN_TEMP_PATH/bin/moc.exe &&
            ln -s $TEMP_PATH/bin/moc $WIN_TEMP_PATH/bin/moc.exe &&
            rm $WIN_TEMP_PATH/bin/rcc.exe &&
            ln -s $TEMP_PATH/bin/rcc $WIN_TEMP_PATH/bin/rcc.exe &&
            rm $WIN_TEMP_PATH/bin/uic.exe &&
            ln -s $TEMP_PATH/bin/uic $WIN_TEMP_PATH/bin/uic.exe'

    - name: Install libpredict
      run: 'git clone https://github.com/la1k/libpredict &&
            cd libpredict &&
            mkdir build &&
            cd build &&
            cmake -DCMAKE_BUILD_TYPE=Release -DCMAKE_C_FLAGS="-D_POSIX_C_SOURCE=1" -DCMAKE_TOOLCHAIN_FILE=../cmake/mingw-w64-x86_64.cmake -DCMAKE_INSTALL_PREFIX=$WIN_TEMP_PATH .. &&
            make -j4 &&
            make install'

    - name: Install muparser
      run: 'git clone https://github.com/beltoforion/muparser &&
            cd muparser &&
            mkdir build &&
            cd build &&
            cmake -DCMAKE_BUILD_TYPE=Release -DCMAKE_TOOLCHAIN_FILE=../cmake/mingw-w64-x86_64.cmake -DCMAKE_INSTALL_PREFIX=$WIN_TEMP_PATH -DENABLE_OPENMP=OFF -DENABLE_SAMPLES=OFF -DCMAKE_SHARED_LINKER_FLAGS="-static-libstdc++" .. &&
            make -j4 &&
            make install'

    - name: Compile LeanHRPT
      run: 'mkdir build &&
            cd build &&
            cmake -DCMAKE_BUILD_TYPE=$BUILD_TYPE -DCMAKE_TOOLCHAIN_FILE=../cmake/mingw-w64-x86_64.cmake -DCMAKE_PREFIX_PATH=$WIN_TEMP_PATH -DLIBPREDICT_PATH=$WIN_TEMP_PATH/lib/libpredict.dll.a -DMUPARSER_PATH=$WIN_TEMP_PATH/lib/libmuparser.dll.a .. &&
            make -j4'

    - name: Package
      run: 'mkdir LeanHRPT-Decode &&
            mkdir LeanHRPT-Decode/plugins &&
            mkdir LeanHRPT-Decode/plugins/styles &&
            mkdir LeanHRPT-Decode/plugins/imageformats &&
            mkdir LeanHRPT-Decode/platforms &&
            cp logo128.png                                             LeanHRPT-Decode/ &&
            cp presets.ini                                             LeanHRPT-Decode/ &&
            cp gradients.ini                                           LeanHRPT-Decode/ &&
            cp calibration.ini                                         LeanHRPT-Decode/ &&
            cp projection.ini                                          LeanHRPT-Decode/ &&
            cp build/LeanHRPT-Decode.exe                               LeanHRPT-Decode/ &&
            cp $WIN_TEMP_PATH/bin/Qt5Core.dll                          LeanHRPT-Decode/ &&
            cp $WIN_TEMP_PATH/bin/Qt5Network.dll                       LeanHRPT-Decode/ &&
            cp $WIN_TEMP_PATH/bin/Qt5Gui.dll                           LeanHRPT-Decode/ &&
            cp $WIN_TEMP_PATH/bin/Qt5Widgets.dll                       LeanHRPT-Decode/ &&
            cp libpredict/build/src/libpredict.dll                     LeanHRPT-Decode/ &&
            cp $WIN_TEMP_PATH/bin/libmuparser.dll                      LeanHRPT-Decode/ &&
            cp $WIN_TEMP_PATH/bin/libgcc_s_seh-1.dll                   LeanHRPT-Decode/ &&
            cp $WIN_TEMP_PATH/bin/libstdc++-6.dll                      LeanHRPT-Decode/ &&
            cp $WIN_TEMP_PATH/bin/libwinpthread-1.dll                  LeanHRPT-Decode/ &&
            cp /usr/lib/gcc/x86_64-w64-mingw32/9.3-win32/libgomp-1.dll LeanHRPT-Decode/ &&
            cp $WIN_TEMP_PATH/plugins/styles/qwindowsvistastyle.dll      LeanHRPT-Decode/plugins/styles/ &&
            cp $WIN_TEMP_PATH/plugins/imageformats/q{jpeg,webp,tiff}.dll LeanHRPT-Decode/plugins/imageformats/ &&
            cp $WIN_TEMP_PATH/plugins/platforms/qwindows.dll           LeanHRPT-Decode/platforms/ &&
            find LeanHRPT-Decode/ -name "*.dll" -exec x86_64-w64-mingw32-strip {} \; &&
            find LeanHRPT-Decode/ -name "*.exe" -exec x86_64-w64-mingw32-strip {} \; &&
            cp mingw64/bin/libssl-1_1-x64.dll                          LeanHRPT-Decode/ &&
            cp mingw64/bin/libcrypto-1_1-x64.dll                       LeanHRPT-Decode/ &&
            zip -r LeanHRPT-Decode.zip LeanHRPT-Decode/'

    - name: Upload zip
      uses: actions/upload-release-asset@v1
      with:
        upload_url: ${{ needs.prepare_release.outputs.upload_url }}
        asset_path: ./LeanHRPT-Decode.zip
        asset_name: LeanHRPT_Decode-x86_64-w64.zip
        asset_content_type: application/zip
      env:
        GITHUB_TOKEN: ${{ github.token }}
